package MultiThread;

public class MechanicII_Model {
	///for build newModel
	public static int ModelNum = 0;
	//140个不同的model，不允许任何周期直行灯全是红
	public static String ModelSetStr = "0,2,11110000,00001111;1,2,00001111,11110000;2,3,11110000,00001111,00001111;3,3,11110000,10001011,00001111;4,3,11110000,00101110,00001111;5,3,11110000,10110010,00001111;6,3,11110000,11101000,00001111;7,3,11110000,11110000,00001111;8,3,00001111,11110000,11110000;9,3,00001111,11101000,11110000;10,3,00001111,10110010,11110000;11,3,00001111,00101110,11110000;12,3,00001111,10001011,11110000;13,3,00001111,00001111,11110000;14,4,11110000,00001111,00001111,00001111;15,4,11110000,10001011,00001111,00001111;16,4,11110000,10001011,10001011,00001111;17,4,11110000,00101110,00001111,00001111;18,4,11110000,10110010,00001111,00001111;19,4,11110000,10110010,10001011,00001111;20,4,11110000,00101110,00101110,00001111;21,4,11110000,10110010,00101110,00001111;22,4,11110000,10110010,10110010,00001111;23,4,11110000,11101000,00001111,00001111;24,4,11110000,11101000,10001011,00001111;25,4,11110000,11110000,00001111,00001111;26,4,11110000,11110000,10001011,00001111;27,4,11110000,11101000,00101110,00001111;28,4,11110000,11110000,00101110,00001111;29,4,11110000,11110000,10110010,00001111;30,4,11110000,11101000,11101000,00001111;31,4,11110000,11110000,11101000,00001111;32,4,11110000,11110000,11110000,00001111;33,4,00001111,11110000,11110000,11110000;34,4,00001111,11101000,11110000,11110000;35,4,00001111,11101000,11101000,11110000;36,4,00001111,10110010,11110000,11110000;37,4,00001111,00101110,11110000,11110000;38,4,00001111,00101110,11101000,11110000;39,4,00001111,10001011,11110000,11110000;40,4,00001111,00001111,11110000,11110000;41,4,00001111,10001011,11101000,11110000;42,4,00001111,00001111,11101000,11110000;43,4,00001111,10110010,10110010,11110000;44,4,00001111,00101110,10110010,11110000;45,4,00001111,00101110,00101110,11110000;46,4,00001111,10001011,10110010,11110000;47,4,00001111,00001111,10110010,11110000;48,4,00001111,00001111,00101110,11110000;49,4,00001111,10001011,10001011,11110000;50,4,00001111,00001111,10001011,11110000;51,4,00001111,00001111,00001111,11110000;52,5,11110000,00001111,00001111,00001111,00001111;53,5,11110000,10001011,00001111,00001111,00001111;54,5,11110000,10001011,10001011,00001111,00001111;55,5,11110000,10001011,10001011,10001011,00001111;56,5,11110000,00101110,00001111,00001111,00001111;57,5,11110000,10110010,00001111,00001111,00001111;58,5,11110000,10110010,10001011,00001111,00001111;59,5,11110000,10110010,10001011,10001011,00001111;60,5,11110000,00101110,00101110,00001111,00001111;61,5,11110000,10110010,00101110,00001111,00001111;62,5,11110000,10110010,10110010,00001111,00001111;63,5,11110000,10110010,10110010,10001011,00001111;64,5,11110000,00101110,00101110,00101110,00001111;65,5,11110000,10110010,00101110,00101110,00001111;66,5,11110000,10110010,10110010,00101110,00001111;67,5,11110000,10110010,10110010,10110010,00001111;68,5,11110000,11101000,00001111,00001111,00001111;69,5,11110000,11101000,10001011,00001111,00001111;70,5,11110000,11101000,10001011,10001011,00001111;71,5,11110000,11110000,00001111,00001111,00001111;72,5,11110000,11110000,10001011,00001111,00001111;73,5,11110000,11110000,10001011,10001011,00001111;74,5,11110000,11101000,00101110,00001111,00001111;75,5,11110000,11110000,00101110,00001111,00001111;76,5,11110000,11110000,10110010,00001111,00001111;77,5,11110000,11110000,10110010,10001011,00001111;78,5,11110000,11101000,00101110,00101110,00001111;79,5,11110000,11110000,00101110,00101110,00001111;80,5,11110000,11110000,10110010,00101110,00001111;81,5,11110000,11110000,10110010,10110010,00001111;82,5,11110000,11101000,11101000,00001111,00001111;83,5,11110000,11101000,11101000,10001011,00001111;84,5,11110000,11110000,11101000,00001111,00001111;85,5,11110000,11110000,11101000,10001011,00001111;86,5,11110000,11110000,11110000,00001111,00001111;87,5,11110000,11110000,11110000,10001011,00001111;88,5,11110000,11101000,11101000,00101110,00001111;89,5,11110000,11110000,11101000,00101110,00001111;90,5,11110000,11110000,11110000,00101110,00001111;91,5,11110000,11110000,11110000,10110010,00001111;92,5,11110000,11101000,11101000,11101000,00001111;93,5,11110000,11110000,11101000,11101000,00001111;94,5,11110000,11110000,11110000,11101000,00001111;95,5,11110000,11110000,11110000,11110000,00001111;96,5,00001111,11110000,11110000,11110000,11110000;97,5,00001111,11101000,11110000,11110000,11110000;98,5,00001111,11101000,11101000,11110000,11110000;99,5,00001111,11101000,11101000,11101000,11110000;100,5,00001111,10110010,11110000,11110000,11110000;101,5,00001111,00101110,11110000,11110000,11110000;102,5,00001111,00101110,11101000,11110000,11110000;103,5,00001111,00101110,11101000,11101000,11110000;104,5,00001111,10001011,11110000,11110000,11110000;105,5,00001111,00001111,11110000,11110000,11110000;106,5,00001111,10001011,11101000,11110000,11110000;107,5,00001111,00001111,11101000,11110000,11110000;108,5,00001111,10001011,11101000,11101000,11110000;109,5,00001111,00001111,11101000,11101000,11110000;110,5,00001111,10110010,10110010,11110000,11110000;111,5,00001111,00101110,10110010,11110000,11110000;112,5,00001111,00101110,00101110,11110000,11110000;113,5,00001111,00101110,00101110,11101000,11110000;114,5,00001111,10001011,10110010,11110000,11110000;115,5,00001111,00001111,10110010,11110000,11110000;116,5,00001111,00001111,00101110,11110000,11110000;117,5,00001111,00001111,00101110,11101000,11110000;118,5,00001111,10001011,10001011,11110000,11110000;119,5,00001111,00001111,10001011,11110000,11110000;120,5,00001111,00001111,00001111,11110000,11110000;121,5,00001111,10001011,10001011,11101000,11110000;122,5,00001111,00001111,10001011,11101000,11110000;123,5,00001111,00001111,00001111,11101000,11110000;124,5,00001111,10110010,10110010,10110010,11110000;125,5,00001111,00101110,10110010,10110010,11110000;126,5,00001111,00101110,00101110,10110010,11110000;127,5,00001111,00101110,00101110,00101110,11110000;128,5,00001111,10001011,10110010,10110010,11110000;129,5,00001111,00001111,10110010,10110010,11110000;130,5,00001111,00001111,00101110,10110010,11110000;131,5,00001111,00001111,00101110,00101110,11110000;132,5,00001111,10001011,10001011,10110010,11110000;133,5,00001111,00001111,10001011,10110010,11110000;134,5,00001111,00001111,00001111,10110010,11110000;135,5,00001111,00001111,00001111,00101110,11110000;136,5,00001111,10001011,10001011,10001011,11110000;137,5,00001111,00001111,10001011,10001011,11110000;138,5,00001111,00001111,00001111,10001011,11110000;139,5,00001111,00001111,00001111,00001111,11110000;";
	//208个不同model，允许部分周期所有直行道为红灯
	public static String ModelSetStr_AllowEmptyPeriod = "0,2,11110000,00001111;1,2,00001111,11110000;2,3,11110000,00001111,00001111;3,3,11110000,10001011,00001111;4,3,11110000,00101110,00001111;5,3,11110000,10101010,00001111;6,3,11110000,10110010,00001111;7,3,11110000,11101000,00001111;8,3,11110000,11110000,00001111;9,3,00001111,11110000,11110000;10,3,00001111,11101000,11110000;11,3,00001111,10110010,11110000;12,3,00001111,10101010,11110000;13,3,00001111,00101110,11110000;14,3,00001111,10001011,11110000;15,3,00001111,00001111,11110000;16,4,11110000,00001111,00001111,00001111;17,4,11110000,10001011,00001111,00001111;18,4,11110000,10001011,10001011,00001111;19,4,11110000,00101110,00001111,00001111;20,4,11110000,10101010,00001111,00001111;21,4,11110000,10101010,10001011,00001111;22,4,11110000,10110010,00001111,00001111;23,4,11110000,10110010,10001011,00001111;24,4,11110000,00101110,00101110,00001111;25,4,11110000,10101010,00101110,00001111;26,4,11110000,10101010,10101010,00001111;27,4,11110000,10110010,00101110,00001111;28,4,11110000,10110010,10101010,00001111;29,4,11110000,10110010,10110010,00001111;30,4,11110000,11101000,00001111,00001111;31,4,11110000,11101000,10001011,00001111;32,4,11110000,11110000,00001111,00001111;33,4,11110000,11110000,10001011,00001111;34,4,11110000,11101000,00101110,00001111;35,4,11110000,11101000,10101010,00001111;36,4,11110000,11110000,00101110,00001111;37,4,11110000,11110000,10101010,00001111;38,4,11110000,11110000,10110010,00001111;39,4,11110000,11101000,11101000,00001111;40,4,11110000,11110000,11101000,00001111;41,4,11110000,11110000,11110000,00001111;42,4,00001111,11110000,11110000,11110000;43,4,00001111,11101000,11110000,11110000;44,4,00001111,11101000,11101000,11110000;45,4,00001111,10110010,11110000,11110000;46,4,00001111,10101010,11110000,11110000;47,4,00001111,00101110,11110000,11110000;48,4,00001111,10101010,11101000,11110000;49,4,00001111,00101110,11101000,11110000;50,4,00001111,10001011,11110000,11110000;51,4,00001111,00001111,11110000,11110000;52,4,00001111,10001011,11101000,11110000;53,4,00001111,00001111,11101000,11110000;54,4,00001111,10110010,10110010,11110000;55,4,00001111,10101010,10110010,11110000;56,4,00001111,00101110,10110010,11110000;57,4,00001111,10101010,10101010,11110000;58,4,00001111,00101110,10101010,11110000;59,4,00001111,00101110,00101110,11110000;60,4,00001111,10001011,10110010,11110000;61,4,00001111,00001111,10110010,11110000;62,4,00001111,10001011,10101010,11110000;63,4,00001111,00001111,10101010,11110000;64,4,00001111,00001111,00101110,11110000;65,4,00001111,10001011,10001011,11110000;66,4,00001111,00001111,10001011,11110000;67,4,00001111,00001111,00001111,11110000;68,5,11110000,00001111,00001111,00001111,00001111;69,5,11110000,10001011,00001111,00001111,00001111;70,5,11110000,10001011,10001011,00001111,00001111;71,5,11110000,10001011,10001011,10001011,00001111;72,5,11110000,00101110,00001111,00001111,00001111;73,5,11110000,10101010,00001111,00001111,00001111;74,5,11110000,10101010,10001011,00001111,00001111;75,5,11110000,10101010,10001011,10001011,00001111;76,5,11110000,10110010,00001111,00001111,00001111;77,5,11110000,10110010,10001011,00001111,00001111;78,5,11110000,10110010,10001011,10001011,00001111;79,5,11110000,00101110,00101110,00001111,00001111;80,5,11110000,10101010,00101110,00001111,00001111;81,5,11110000,10101010,10101010,00001111,00001111;82,5,11110000,10101010,10101010,10001011,00001111;83,5,11110000,10110010,00101110,00001111,00001111;84,5,11110000,10110010,10101010,00001111,00001111;85,5,11110000,10110010,10101010,10001011,00001111;86,5,11110000,10110010,10110010,00001111,00001111;87,5,11110000,10110010,10110010,10001011,00001111;88,5,11110000,00101110,00101110,00101110,00001111;89,5,11110000,10101010,00101110,00101110,00001111;90,5,11110000,10101010,10101010,00101110,00001111;91,5,11110000,10101010,10101010,10101010,00001111;92,5,11110000,10110010,00101110,00101110,00001111;93,5,11110000,10110010,10101010,00101110,00001111;94,5,11110000,10110010,10101010,10101010,00001111;95,5,11110000,10110010,10110010,00101110,00001111;96,5,11110000,10110010,10110010,10101010,00001111;97,5,11110000,10110010,10110010,10110010,00001111;98,5,11110000,11101000,00001111,00001111,00001111;99,5,11110000,11101000,10001011,00001111,00001111;100,5,11110000,11101000,10001011,10001011,00001111;101,5,11110000,11110000,00001111,00001111,00001111;102,5,11110000,11110000,10001011,00001111,00001111;103,5,11110000,11110000,10001011,10001011,00001111;104,5,11110000,11101000,00101110,00001111,00001111;105,5,11110000,11101000,10101010,00001111,00001111;106,5,11110000,11101000,10101010,10001011,00001111;107,5,11110000,11110000,00101110,00001111,00001111;108,5,11110000,11110000,10101010,00001111,00001111;109,5,11110000,11110000,10101010,10001011,00001111;110,5,11110000,11110000,10110010,00001111,00001111;111,5,11110000,11110000,10110010,10001011,00001111;112,5,11110000,11101000,00101110,00101110,00001111;113,5,11110000,11101000,10101010,00101110,00001111;114,5,11110000,11101000,10101010,10101010,00001111;115,5,11110000,11110000,00101110,00101110,00001111;116,5,11110000,11110000,10101010,00101110,00001111;117,5,11110000,11110000,10101010,10101010,00001111;118,5,11110000,11110000,10110010,00101110,00001111;119,5,11110000,11110000,10110010,10101010,00001111;120,5,11110000,11110000,10110010,10110010,00001111;121,5,11110000,11101000,11101000,00001111,00001111;122,5,11110000,11101000,11101000,10001011,00001111;123,5,11110000,11110000,11101000,00001111,00001111;124,5,11110000,11110000,11101000,10001011,00001111;125,5,11110000,11110000,11110000,00001111,00001111;126,5,11110000,11110000,11110000,10001011,00001111;127,5,11110000,11101000,11101000,00101110,00001111;128,5,11110000,11101000,11101000,10101010,00001111;129,5,11110000,11110000,11101000,00101110,00001111;130,5,11110000,11110000,11101000,10101010,00001111;131,5,11110000,11110000,11110000,00101110,00001111;132,5,11110000,11110000,11110000,10101010,00001111;133,5,11110000,11110000,11110000,10110010,00001111;134,5,11110000,11101000,11101000,11101000,00001111;135,5,11110000,11110000,11101000,11101000,00001111;136,5,11110000,11110000,11110000,11101000,00001111;137,5,11110000,11110000,11110000,11110000,00001111;138,5,00001111,11110000,11110000,11110000,11110000;139,5,00001111,11101000,11110000,11110000,11110000;140,5,00001111,11101000,11101000,11110000,11110000;141,5,00001111,11101000,11101000,11101000,11110000;142,5,00001111,10110010,11110000,11110000,11110000;143,5,00001111,10101010,11110000,11110000,11110000;144,5,00001111,00101110,11110000,11110000,11110000;145,5,00001111,10101010,11101000,11110000,11110000;146,5,00001111,00101110,11101000,11110000,11110000;147,5,00001111,10101010,11101000,11101000,11110000;148,5,00001111,00101110,11101000,11101000,11110000;149,5,00001111,10001011,11110000,11110000,11110000;150,5,00001111,00001111,11110000,11110000,11110000;151,5,00001111,10001011,11101000,11110000,11110000;152,5,00001111,00001111,11101000,11110000,11110000;153,5,00001111,10001011,11101000,11101000,11110000;154,5,00001111,00001111,11101000,11101000,11110000;155,5,00001111,10110010,10110010,11110000,11110000;156,5,00001111,10101010,10110010,11110000,11110000;157,5,00001111,00101110,10110010,11110000,11110000;158,5,00001111,10101010,10101010,11110000,11110000;159,5,00001111,00101110,10101010,11110000,11110000;160,5,00001111,00101110,00101110,11110000,11110000;161,5,00001111,10101010,10101010,11101000,11110000;162,5,00001111,00101110,10101010,11101000,11110000;163,5,00001111,00101110,00101110,11101000,11110000;164,5,00001111,10001011,10110010,11110000,11110000;165,5,00001111,00001111,10110010,11110000,11110000;166,5,00001111,10001011,10101010,11110000,11110000;167,5,00001111,00001111,10101010,11110000,11110000;168,5,00001111,00001111,00101110,11110000,11110000;169,5,00001111,10001011,10101010,11101000,11110000;170,5,00001111,00001111,10101010,11101000,11110000;171,5,00001111,00001111,00101110,11101000,11110000;172,5,00001111,10001011,10001011,11110000,11110000;173,5,00001111,00001111,10001011,11110000,11110000;174,5,00001111,00001111,00001111,11110000,11110000;175,5,00001111,10001011,10001011,11101000,11110000;176,5,00001111,00001111,10001011,11101000,11110000;177,5,00001111,00001111,00001111,11101000,11110000;178,5,00001111,10110010,10110010,10110010,11110000;179,5,00001111,10101010,10110010,10110010,11110000;180,5,00001111,00101110,10110010,10110010,11110000;181,5,00001111,10101010,10101010,10110010,11110000;182,5,00001111,00101110,10101010,10110010,11110000;183,5,00001111,00101110,00101110,10110010,11110000;184,5,00001111,10101010,10101010,10101010,11110000;185,5,00001111,00101110,10101010,10101010,11110000;186,5,00001111,00101110,00101110,10101010,11110000;187,5,00001111,00101110,00101110,00101110,11110000;188,5,00001111,10001011,10110010,10110010,11110000;189,5,00001111,00001111,10110010,10110010,11110000;190,5,00001111,10001011,10101010,10110010,11110000;191,5,00001111,00001111,10101010,10110010,11110000;192,5,00001111,00001111,00101110,10110010,11110000;193,5,00001111,10001011,10101010,10101010,11110000;194,5,00001111,00001111,10101010,10101010,11110000;195,5,00001111,00001111,00101110,10101010,11110000;196,5,00001111,00001111,00101110,00101110,11110000;197,5,00001111,10001011,10001011,10110010,11110000;198,5,00001111,00001111,10001011,10110010,11110000;199,5,00001111,00001111,00001111,10110010,11110000;200,5,00001111,10001011,10001011,10101010,11110000;201,5,00001111,00001111,10001011,10101010,11110000;202,5,00001111,00001111,00001111,10101010,11110000;203,5,00001111,00001111,00001111,00101110,11110000;204,5,00001111,10001011,10001011,10001011,11110000;205,5,00001111,00001111,10001011,10001011,11110000;206,5,00001111,00001111,00001111,10001011,11110000;207,5,00001111,00001111,00001111,00001111,11110000;";
	
	public static int[][][] trafficLightTableModel     = null;//(modelID,periodID,ALAS..DS)=>green or red
	public static int[]     trafficLightTablePeriod    = null;//(modelID) => Period Numbers
	public static int[][]   trafficLightTablefirstGreen= null;//(modelID,ALAS..DS),which period is the first Green 
	
	/*
	 * ModelSetStr = "MODEL0;MODEL1;...;MODELi;...;" => MODELx = "modelID,modelTim,T0,T1,T2,..Tj;" => Tj = "00110011" Bits(AL,AS,BL,BS,CL,CS,DL,DS)
	 *B = A->GotoID[2] ; C = A->GotoID[0] ; D = A->GotoID[1] ;
	 *      B
	 * C <- + -> D
	 *      A
	 * for easy coding, use 0~3 lab four arrays, 0->A,1->D,2->B,3->C, yes , it is anti-clockwise;
	 * addition details:
	 * as too many model can be created, we just add some more limits:
	 * 1) only think about straight lights, and left lights we use the Maximum-rule, that if can be green we make it green
	 * 2) no periods have no green straight light, that is to say at lest there is one green straight lights at any intersections
	 * 3) green lights are continuous, and must be start or end of a big period;
	 */
	//follow is used for DFS:	
	private static boolean tmpModelLightTable[][][] = new boolean[4][2][5];//0->A,1->D,2->B,3->C;
	private static boolean standardModelLightTable[][][] = new boolean[4][2][5];//0->A,1->D,2->B,3->C;
	private static boolean mustFalseTable[][][] = new boolean[4][2][5];//tmpModelLightTable没更新一层，后方就有一些位置必须输红灯了
	private static int tmplightT = 0;
	private static String modelStr[] = null;
	
	private static void updateMustFalseTable(int lightID,int leftorstraight,int maxT)//只修改mustFalseTable[lightID][leftorstraight][]
	{
		for(int i=0;i<maxT;i++)
		{
			if(leftorstraight==0)//left
			{
				int other = lightID - 1;
				if(other>=0 && tmpModelLightTable[other][1][i]) mustFalseTable[lightID][0][i]=true;///must be red light
				else mustFalseTable[lightID][0][i]=false;
			}
			else//straight
			{
				int other1 = lightID - 1;
				int other2 = lightID - 3;
				int other3 = (lightID + 1)%4;
				if(     (other1>=0 		&& tmpModelLightTable[other1][1][i])  
					||  (other2>=0 		&& tmpModelLightTable[other2][1][i]) 
					||  (other3<lightID && tmpModelLightTable[other3][0][i])
					) mustFalseTable[lightID][1][i]=true;///must be red light
				else mustFalseTable[lightID][1][i]=false;
			}
		}
	}
	private static boolean StandardTable(int maxT)///1) no "00000000";2) max left Green light 
	{
		for(int k=0;k<maxT;k++)
		{
			int cnt = 0;
			for(int i=0;i<4;i++)
			for(int j=0;j<2;j++)
			{
				standardModelLightTable[i][j][k] = tmpModelLightTable[i][j][k];
				if(tmpModelLightTable[i][j][k]) cnt++;
				if(j==0)//左转极大性原则，即只要直线不干扰，能左转就左转
				{
					int other = (i+4-1)%4;
					if(tmpModelLightTable[other][1][k]==false) standardModelLightTable[i][j][k] = true;
				}
			}
			//这里控制是否允许直行道全部是空
			//if(cnt==0) return false;//不允许一个周期上所有直线灯都是红灯，为了减小搜索空间，约能减小2/3空间
		}
		return true;
	}
	private static void dfs(int lightID,int leftorstraight)
	//先lightID，再leftorstraight，一次递归8层，分别为(0,0),(0,1)...(3,1),绿灯连续
	{
		if(lightID>=3 && leftorstraight>=2 )
		{
			if(StandardTable(tmplightT)==false) return;
			///add to ModelSetStr
			StringBuilder NewModel = new StringBuilder();
			NewModel.append(ModelNum);
			NewModel.append(',');
			NewModel.append(tmplightT);
			StringBuffer tmpLight = new StringBuffer("00000000");
			for(int tim = 0; tim<tmplightT; tim++)
			{
				tmpLight.setCharAt(0,standardModelLightTable[0][0][tim]?'1':'0');//AL
				tmpLight.setCharAt(1,standardModelLightTable[0][1][tim]?'1':'0');//AS
				tmpLight.setCharAt(2,standardModelLightTable[2][0][tim]?'1':'0');//BL
				tmpLight.setCharAt(3,standardModelLightTable[2][1][tim]?'1':'0');//BS
				tmpLight.setCharAt(4,standardModelLightTable[3][0][tim]?'1':'0');//CL
				tmpLight.setCharAt(5,standardModelLightTable[3][1][tim]?'1':'0');//CS
				tmpLight.setCharAt(6,standardModelLightTable[1][0][tim]?'1':'0');//DL
				tmpLight.setCharAt(7,standardModelLightTable[1][1][tim]?'1':'0');//DS
				NewModel.append(',');
				NewModel.append(tmpLight);
			}
			NewModel.append(';');
			ModelNum++;
			ModelSetStr += NewModel.toString();
			
			System.out.println("ModelNum: "+ModelNum);
			System.out.println(NewModel.toString());
			return;
		}
		if(leftorstraight>=2) {leftorstraight = 0;lightID += 1;}
		updateMustFalseTable(lightID,leftorstraight,tmplightT);
		if(leftorstraight==0) {dfs(lightID,leftorstraight+1);return;}//只考虑直行
		for(int h=0;h<tmplightT;h++)
		for(int t=h;t<tmplightT;t++)
		//[h,t]:green,[0,h-1]and[t+1,tmplightT-1]red
		{
			if(h!=0&&t!=tmplightT-1) continue;//只考虑前后相连
			boolean ok = true;
			for(int ii = 0;ii<tmplightT;ii++) 
			{
				tmpModelLightTable[lightID][leftorstraight][ii] = (ii>=h&&ii<=t?true:false);
				if(mustFalseTable[lightID][leftorstraight][ii] && tmpModelLightTable[lightID][leftorstraight][ii]) {ok=false;break;}
			}
			//if(lightID==0&&leftorstraight==1&&tmpModelLightTable[lightID][leftorstraight][0]==false) ok=false;//对称性，没用
			if(ok)
			{
				dfs(lightID,leftorstraight+1);
			}
		}
	}
	public static void BuildModels()
	{
		ModelNum = 0;
		ModelSetStr = "";
		for(int modelT=2;modelT<=5;modelT++)
		{
			tmplightT = modelT;
			dfs(0,0);
		}
		System.out.println(ModelSetStr);
	}
	public static void initTableFrom()
	{
		String[] strs = ModelSetStr_AllowEmptyPeriod.trim().split(";");
		ModelNum = strs.length;
		trafficLightTableModel  	= new int[ModelNum][5][8];
		trafficLightTablePeriod 	= new int[ModelNum];
		trafficLightTablefirstGreen = new int[ModelNum][8];
		modelStr = new String[ModelNum];
		///System.out.println(ModelNum);
		for(String st : strs)
		{
			String[] ss = st.trim().split(",");
			int modelID  = toInt(ss[0]);
			int modelTim = toInt(ss[1]);
			trafficLightTablePeriod[modelID] = modelTim;
			for(int j=0;j<8;j++) trafficLightTablefirstGreen[modelID][j] = 10000;
			
			for(int i=0;i<modelTim;i++)
			{
				String tmpS = ss[i+2];
				for(int j=0;j<8;j++)
				{
					if(tmpS.charAt(j)=='0') trafficLightTableModel[modelID][i][j] = 0;
					else {
						trafficLightTableModel[modelID][i][j] = 1;
						trafficLightTablefirstGreen[modelID][j] = Math.min(i, trafficLightTablefirstGreen[modelID][j]);
					}
				}
			}
			
			modelStr[modelID] = st;
		}
		//System.out.println("ModelinitOK");
	}
	static public int getLightLab(int modelID,int tim,String which,boolean mustBeRed)
	{
		if(mustBeRed) return 0;
		if(tim<0 || tim>=trafficLightTablePeriod[modelID])
		{
			System.out.println("fail, tim is out of range!");
			return 0;
		}
		int tmplightID = 0;
		if(which.equals("AL")) tmplightID = 0;
		else if(which.equals("AS")) tmplightID = 1;
		else if(which.equals("BL")) tmplightID = 2;
		else if(which.equals("BS")) tmplightID = 3;
		else if(which.equals("CL")) tmplightID = 4;
		else if(which.equals("CS")) tmplightID = 5;
		else if(which.equals("DL")) tmplightID = 6;
		else if(which.equals("DS")) tmplightID = 7;
		return trafficLightTableModel[modelID][tim][tmplightID];
	}
	static public int getLightLab(int modelID,int tim,int which,boolean mustBeRed)
	{
		if(mustBeRed) return 0;
		if(tim<0 || tim>=trafficLightTablePeriod[modelID])
		{
			System.out.println("fail, tim is out of range!");
			return 0;
		}
		return trafficLightTableModel[modelID][tim][which];
	}
	static public int toInt(String s){
		return Integer.parseInt( s );
	}
	static public String getModelStr(int modelID)
	{
		return modelStr[modelID];
	}
	/**
	 * 引入该类的时候，执行初始化。
	 */
	static
	{
		initTableFrom();
	}
}
